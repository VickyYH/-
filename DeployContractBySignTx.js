//部署合约
var Web3 = require('web3');
if (typeof web3 !== 'undefined') {
    web3 = new Web3(web3.currentProvider);
} else {
    // set the provider you want from Web3.providers
    web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
}
var contractbin = "0x608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610a9e806100326000396000f30060806040d20e8146102bf578063deff41c1146102f0578063f2fde38b14610305575b600080fd5b3480156100b457600080fd5b506100d360043567ffffffffffffffff60243581169060443516610326565b6040805167ffffffffffffffff9092168252519081900360200190f35b3480156100fc57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261014994369492936024939284019190819084018382808284375094975061047f9650505050505050565b005b34801561015757600080fd5b5061016360043561055e565b6040805167ffffffffffffffff808716825284811692820192909252908216606082015260806020808301828152865192840192909252855160a0840191878101910280838360005b838110156101c45781810151838201526020016101ac565b505050509050019550505050505060405180910390f35b3480156101e757600080fd5b506040805160206004604435818101358381028086018501909652808552610149958335956024803567ffffffffffffffff16963696956064959394920192918291850190849080828437509497505067ffffffffffffffff853581169650602090950135909416935061063092505050565b34801561026657600080fd5b50610149610704565b34801561027b57600080fd5b506100d360043567ffffffffffffffff6024358116906044351661071e565b3480156102a657600080fd5b506100d360043567ffffffffffffffff6024351661085d565b3480156102cb57600080fd5b506102d4610887565b60408051600160a060020a039092168252519081900360200190f35b3480156102fc57600080fd5b506102d4610897565b34801561031157600080fd5b50610149600160a060020a03600435166108a6565b6000838152600160205260408120818061034083876108f8565b60018301546003111561035257600080fd5b505060018101546002190160005b8181116100a3576001830180548290811061037757fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff168567ffffffffffffffff16118015610414575082600101816001018154811015156103d257fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff168567ffffffffffffffff1611155b1561046d57825460018401805467ffffffffffffffff909216916002840190811061043b57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16019350610475565b600301610360565b5050509392505050565b60008054600160a060020a0316331461049757600080fd5b50604080516c01000000000000000000000000309081028252915190819003601401812063ffffffff7c0100000000000000000000000000000000000000000000000000000000808304918216028352845191939290918591600401908190602084019080838360005b83811015610519578181015183820152602001610501565b50505050905090810190601f1680156105465780820380516001836020036101000a031916815260200191505b50915050600060405180830381865af4505050505050565b60008181526001602081815260408084208054938101805483518186028101860190945280845267ffffffffffffffff90951695606095909485949291908301828280156105ff57602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116105ba5790505b50505060029093015496989197505067ffffffffffffffff8087169668010000000000000000900416945092505050565b61063861096a565b506040805160808101825267ffffffffffffffff8681168252602080830187815286831684860152858316606085015260008a815260018084529590208451815467ffffffffffffffff19169416939093178355518051939485946106a4939185019290910190610992565b5060408201516002909101805460609093015167ffffffffffffffff90811668010000000000000000026fffffffffffffffff0000000000000000199190931667ffffffffffffffff199094169390931792909216179055505050505050565b600054600160a060020a0316331461071b57600080fd5b33ff5b6000838152600160205260408120818061073883876108f8565b60018301546003111561074a57600080fd5b505060018101546002190160005b8181116100a3576001830180548290811061076f57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff168567ffffffffffffffff1611801561080c575082600101816001018154811015156107ca57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff168567ffffffffffffffff1611155b15610855576001830180546002830190811061082457fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff169350610475565b600301610758565b600082815260016020526040812061087581846108f8565b5467ffffffffffffffff169392505050565b600054600160a060020a03165b90565b600054600160a060020a031681565b600054600160a060020a031633146108bd57600080fd5b600160a060020a038116156108f5576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600282015467ffffffffffffffff908116908216101561091757600080fd5b600282015460006801000000000000000090910467ffffffffffffffff16111561096657600282015467ffffffffffffffff680100000000000000009091048116908216111561096657600080fd5b5050565b6040805160808101825260008082526060602083018190529282018190529181019190915290565b82805482825590600052602060002090600301600490048101928215610a3d5791602002820160005b83821115610a0757835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555092602001926008016020816007010492830192600103026109bb565b8015610a3b5782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302610a07565b505b50610a49929150610a4d565b5090565b61089491905b80821115610a4957805467ffffffffffffffff19168155600101610a535600a165627a7a72305820a3c446db35d12a029b1c522e13cced2c3140c7d01504c79351ca70daadeb3c3e0029";
var store = '{"address":"111141afeb8ede5753cfa90ecf11111521bc111b","crypto":{"cipher":"aes-128-ctr","ciphertext":"b29eb357b30f5a000a5d7430f2d46623121eed","cipherparams":{"iv":"af33ad0e07e39495f735670ed78d8472"},"kdf":"scrypt","kdfparams":{"dklen":32,"n":262144,"p":1,"r":8,"salt":"501cb70a852ac62dbfaf57769c1d30d2200e286c262702d26e794425e1a3bd42"},"mac":"b6dc91ad08b31e1848aeadbbb2352479e42a0cba8fa796105ff81dbd83075a73"},"id":"844a1a0a-292b-4eae-9430-f4c61cbeb858","version":3}'
//根据keystore和密码解析私钥
account = web3.eth.accounts.decrypt(store, 'mypassword');
//获取用户nonce
var accountNonce;
web3.eth.getTransactionCount(account.address,"pending",function(error, nonce) {
    accountNonce = nonce;
});
function CreateRuleCon(callback)
{
    var ruleConTx = {
        nonce: accountNonce,
        gasPrice: '0x1',
        gasLimit: '0x271000',
        //to: '0x0000000000000000000000000000000000000000',
        value: '0x00',
        chainId:1,
        data: contractbin
    }
    //使用私钥对交易签名
    web3.eth.accounts.signTransaction(ruleConTx,account.privateKey)
    .then(ret => {
        //发送签名交易
        web3.eth.sendSignedTransaction(ret.rawTransaction)
        .on('error', function(error){ console.error(error) })
        .on('transactionHash', function(transactionHash){ console.log("CreateRuleCon transactionHash:",transactionHash)})
        .on('receipt', function(receipt){
        console.log("Contract address:",receipt.contractAddress,"transactionHash:",receipt.transactionHash) // contains the new contract address
        accountNonce++;
        });
    });
}

CreateRuleCon();
